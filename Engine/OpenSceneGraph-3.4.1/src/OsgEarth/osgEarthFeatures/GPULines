/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHFEATURES_GPU_LINES_H
#define OSGEARTHFEATURES_GPU_LINES_H 1

#include <osgEarthFeatures/Common>
#include <osgEarthFeatures/Filter>
#include <osgEarthSymbology/Style>
#include <osg/Array>
#include <osg/Geometry>

namespace osgEarth { namespace Features
{
    using namespace osgEarth::Symbology;

    /**
     * Static application-wide settings for GPU Line Generation
     * You can set these in your app if you don't like the defaults.
     */
    class OSGEARTHFEATURES_EXPORT GPULines
    {        
    public:
        //! Binding location for "previous" vertex attribute
        static int PreviousVertexAttrLocation;

        //! Binding location for "next" vertex attribute
        static int NextVertexAttrLocation;

        //! Binding location for "width" attribute
        static int WidthAttrLocation; 

    private:
        GPULines() { }
    };

    /**
     * Assembles a drawable for rendering lines on the GPU.
     */
    class OSGEARTHFEATURES_EXPORT GPULinesOperator
    {
    public:
        struct Callback {
            virtual void operator()(unsigned i) = 0;
        };

    public:
        /**
         * Default constructor
         */
        GPULinesOperator();

        /**
         * Construct the operator
         * @param[in ] stroke Line rendering properties
         */
        GPULinesOperator(const Stroke& stoke);

        /**
         * Run the GPU lines assembler.
         *
         * @param[in ] verts Array of vertices to use to build a GPU line strip
         * @param[in ] closeTheLoop Whether to connect the last point to the first
         *
         * @return Geometry suitable for use with GPU line shader.
         */
        osg::Geometry* operator()(osg::Vec3Array* verts, bool closeTheLoop) const;

        /**
         * Installs the necessary shader to render GPU lines
         */
        void installShaders(osg::Node* node) const;

    protected:
        Stroke _stroke;
        friend class GPULinesFilter;
    };

} } // namespace osgEarth::Features

#endif // OSGEARTHFEATURES_GPU_LINES_H
